import requests
import logging
from django.conf import settings
from django.utils import timezone
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""
    
    def __init__(self):
        self.token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        self.base_url = f"https://api.telegram.org/bot{self.token}"
    
    def send_message(self, chat_id, text, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        url = f"{self.base_url}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        
        try:
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False
    
    def send_event_notification(self, event, user, notification_type):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"""
        if not hasattr(user, 'telegram_account') or not user.telegram_account.is_active:
            return False
        
        telegram_account = user.telegram_account
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self._should_send_notification(telegram_account, notification_type):
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = self._format_notification_message(event, notification_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return self.send_message(telegram_account.telegram_id, message)
    
    def _should_send_notification(self, telegram_account, notification_type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if not telegram_account.notifications_enabled:
            return False
        
        notification_mapping = {
            '1_day': telegram_account.notify_1_day,
            '12_hours': telegram_account.notify_12_hours,
            '3_hours': telegram_account.notify_3_hours,
            '1_hour': telegram_account.notify_1_hour,
            '30_minutes': telegram_account.notify_30_minutes,
            '10_minutes': telegram_account.notify_10_minutes,
            '1_minute': telegram_account.notify_1_minute,
        }
        
        return notification_mapping.get(notification_type, False)
    
    def _format_notification_message(self, event, notification_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        time_until = self._get_time_until_text(notification_type)
        
        message = f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
        message += f"<b>–°–æ–±—ã—Ç–∏–µ:</b> {event.title}\n"
        message += f"<b>–í—Ä–µ–º—è:</b> {event.start_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        
        if event.location:
            message += f"<b>–ú–µ—Å—Ç–æ:</b> {event.location}\n"
        
        if event.event_type:
            message += f"<b>–¢–∏–ø:</b> {event.get_event_type_display()}\n"
        
        if event.case:
            message += f"<b>–î–µ–ª–æ:</b> {event.case.title}\n"
        
        message += f"\n–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è {time_until}"
        
        return message
    
    def _get_time_until_text(self, notification_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è"""
        time_mapping = {
            '1_day': '—á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å',
            '12_hours': '—á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤',
            '3_hours': '—á–µ—Ä–µ–∑ 3 —á–∞—Å–∞',
            '1_hour': '—á–µ—Ä–µ–∑ 1 —á–∞—Å',
            '30_minutes': '—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç',
            '10_minutes': '—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç',
            '1_minute': '—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É',
        }
        return time_mapping.get(notification_type, '—Å–∫–æ—Ä–æ')